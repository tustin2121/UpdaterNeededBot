// newspress/modules/BurningRed.js
// The Burning Red module
// The module where dreams come to die.

const { ReportingModule, Rule } = require('./_base');
const {
	Gen1Context, Gen3Context, 
	BurningDownContext, BurningUpContext, BurningReport,
	GainItem, LostItem,
} = require('../ledger');

const LOGGER = getLogger('BurningRedModule');

const RULES = [];

/**   ** Burning Red Module **
 * Responsible for keeping tabs on all items across bag, pc, and held by pokemon.
 * This includes buying, selling, obtaining, using items.
 */
class BurningRedModule extends ReportingModule {
	constructor(config, memory) {
		super(config, memory, 3);
		
	}
	
	firstPass(ledger, { prev_api:prev, curr_api:curr }) {
		this.setDebug(LOGGER, ledger);
		if (curr.currentGen == 1) {
			ledger.addItem(new Gen1Context());
			if (prev.currentGen !== 1) {
				ledger.addItem(new BurningReport('red'));
			}
			if (curr.currentlyWarping || prev.currentGen !== 1) {
				ledger.addItem(new BurningDownContext());
			}
		} else {
			ledger.addItem(new Gen3Context());
			if (prev.currentGen !== 3) {
				ledger.addItem(new BurningReport('firered'));
			}
			if (curr.currentlyWarping || prev.currentGen !== 3) {
				ledger.addItem(new BurningUpContext());
			}
		}
	}
	
	secondPass(ledger) {
		RULES.forEach(rule=> rule.apply(ledger, this) );
	}
}

// Fire Red -> Red item map "0x00" means ignore when transfering
const FIRERED_RED_ITEMS = [
/*      0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F*/
/*0000*/0x00, 0x01, 0x02, 0x03, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0B, 0x0C,
/*0010*/0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x34, 0x35, 0x36, 0x3C, 0x3D, 0x3E, 0x13, 0x00, 0x00,
/*0020*/0x00, 0x00, 0x50, 0x51, 0x52, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0030*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23,
/*0040*/0x24, 0x25, 0x26, 0x27, 0x28, 0x4F, 0x00, 0x00, 0x00, 0x37, 0x3A, 0x41, 0x42, 0x43, 0x2E, 0x44,
/*0050*/0x33, 0x00, 0x00, 0x38, 0x39, 0x1D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x20,
/*0060*/0x21, 0x22, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00,
/*0070*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0080*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0090*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00A0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00B0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00C0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00D0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00E0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*00F0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0100*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0110*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0120*/0x00, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
/*0130*/0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
/*0140*/0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
/*0150*/0xF8, 0xF9, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0160*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/*0170*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// Red -> Fire Red item map "0x0000" means ignore when transfering
const RED_FIRERED_ITEMS = [
/*       0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07    0x08    0x09    0x0A    0x0B    0x0C    0x0D    0x0E    0x0F*/
/*0x00*/0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0000, 0x0000, 0x0000, 0x0005, 0x0000, 0x005E, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012,
/*0x10*/0x0013, 0x0014, 0x0015, 0x0016, 0x000D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0055, 0x0056, 0x0000,
/*0x20*/0x005F, 0x0060, 0x0061, 0x003F, 0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x004E, 0x0062,
/*0x30*/0x0000, 0x006E, 0x0000, 0x0050, 0x0027, 0x0018, 0x0019, 0x0049, 0x0053, 0x0054, 0x004A, 0x0000, 0x001A, 0x001B, 0x001C, 0x0000,
/*0x40*/0x0000, 0x004B, 0x004C, 0x004D, 0x004F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0045,
/*0x50*/0x0023, 0x0024, 0x0025, 0x0026, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0x60*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0x70*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0x80*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0x90*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0xA0*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0xB0*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/*0xC0*/0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0121, 0x0122, 0x0123, 0x0124, 0x0125, 0x0126, 0x0127,
/*0xD0*/0x0128, 0x0129, 0x012A, 0x012B, 0x012C, 0x012D, 0x012E, 0x012F, 0x0130, 0x0131, 0x0132, 0x0133, 0x0134, 0x0135, 0x0136, 0x0137,
/*0xE0*/0x0138, 0x0139, 0x013A, 0x013B, 0x013C, 0x013D, 0x013E, 0x013F, 0x0140, 0x0141, 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x0147,
/*0xF0*/0x0148, 0x0149, 0x014A, 0x014B, 0x014C, 0x014D, 0x014E, 0x014F, 0x0150, 0x0151, 0x0152, 0x0153, 0x0154, 0x0155, 0x0156, 0x0157,
];

function _convertItems({ ledger, lost, gain, ITEM_CONVERSION_TABLE }) {
	ledger.mark(lost);
	ledger.mark(gain);
	for (let lid in lost) {
		let gid = ITEM_CONVERSION_TABLE[lid];
		if (gid === 0) continue;
		if (gain[gid] === null) continue;
		let amount = Math.min(lost[lid].amount, gain[gid].amount);
		lost[lid].amount -= amount;
		gain[gid].amount -= amount;
	}
	for (let lid in lost) {
		let item = lost[lid]
		let gid = ITEM_CONVERSION_TABLE[item.item.id];
		if (gid !== 0) {
			item.item.id = gid;
		}
		if (item.amount > 0) ledger.add(item);
		if (item.amount < 0) {
			let n = new GainItem(item.item, -item.amount);
			ledger.add(n).mark(n);
		}
	}
	for (let gid in gain) {
		let item = gain[gid]
		if (item.amount > 0) ledger.add(item);
		if (item.amount < 0) {
			let n = new LostItem(item.item, -item.amount);
			ledger.add(n).mark(n);
		}
	}
}

RULES.push(new Rule(`When transitioning to Red, item ids transition as well.`)
	.when(ledger=>ledger.has('BurningDownContext'))
	.when(ledger=>ledger.has('LostItem'))
	.when(ledger=>ledger.has('GainItem'))
	.then(ledger=>{
		let lost = [], gain = [];
		ledger.getAndRemove(1).forEach(x=> lost[x.item.id] = x);
		ledger.getAndRemove(2).forEach(x=> gain[x.item.id] = x);
		_convertItems({ ledger, lost, gain, ITEM_CONVERSION_TABLE:FIRERED_RED_ITEMS });
	})
);
RULES.push(new Rule(`When transitioning to FireRed, item ids transition as well.`)
	.when(ledger=>ledger.has('BurningUpContext'))
	.when(ledger=>ledger.has('LostItem'))
	.when(ledger=>ledger.has('GainItem'))
	.then(ledger=>{
		let lost = [], gain = [];
		ledger.getAndRemove(1).forEach(x=> lost[x.item.id] = x);
		ledger.getAndRemove(2).forEach(x=> gain[x.item.id] = x);
		_convertItems({ ledger, lost, gain, ITEM_CONVERSION_TABLE:RED_FIRERED_ITEMS });
	})
);



RULES.push(new Rule(`When in Red, postpone lost held items.`)
	.when(ledger=>ledger.has('Gen1Context'))
	.when(ledger=>ledger.has('HeldItemLost').ofNoFlavor())
	.then(ledger=>{
		ledger.postpone(1);
	})
);
RULES.push(new Rule(`When transitioning, remaining items can become burned.`)
	.when(ledger=>ledger.has('BurningDownContext', 'BurningUpContext'))
	.when(ledger=>ledger.has('LostItem', 'GainItem').ofNoFlavor())
	.then(ledger=>{
		ledger.get(1).forEach(x=>x.flavor = 'burned');
	})
);

// RULES.push(new Rule(`When in Red, ignore burned items.`)
// 	.when(ledger=>ledger.has('Gen1Context'))
// 	.when(ledger=>ledger.has('LostItem', 'HeldItemLost').ofFlavor('burned'))
// 	.then(ledger=>{
// 		ledger.postpone(1);
// 	})
// );

RULES.push(new Rule(`When in Red, ignore Pokerus changes`)
	.when(ledger=>ledger.has('Gen1Context'))
	.when(ledger=>ledger.has('MonPokerusInfected', 'MonPokerusCured'))
	.then(ledger=>{
		ledger.postpone(1);
	})
);

module.exports = BurningRedModule;
